{"version":3,"sources":["../../development/js/main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["angular.module(\"SliderApp\", ['ngMaterial', 'ngMessages', 'material.svgAssetsCache'])\n    .controller('SliderCtrl', ['$scope', function($scope) {\n        //Set the metrics and initialize weightings and array of fixed metrics, that is, metrics that are checked off\n        $scope.metrics = ['auV', 'au_oz', 'mcap', 'grd', 'price'];\n        $scope.weightings = {\n            'auV': 100,\n            'au_oz': 0,\n            'mcap': 0,\n            'grd': 0,\n            'price': 0,\n        };\n        $scope.fixed = [];\n        //Initialze range for sliders. By default, no metrics are fixed, so the full range is allowed.\n\n        $scope.rangeMax = 100;\n        $scope.rangeMin = -100;\n\n        //Make weightings iterable (so that they can be summed over more easily)\n        $scope.weightings[Symbol.iterator] = function*() {\n            let properties = $scope.metrics;\n            for (let p of properties) {\n                yield this[p];\n            }\n\n        }\n\n        $scope.toggleFix = function(metric) {\n            const index = $scope.fixed.indexOf(metric);\n            if (index === -1) {\n                $scope.fixed.push(metric);\n                if ($scope.fixed.length === $scope.metrics.length - 1) {\n                    let [last] = $scope.metrics.filter(metric => $scope.fixed.indexOf(metric) === -1);\n                    $scope.disableAll = true;\n\n                }\n            }\n            else {\n                $scope.fixed.splice(index, 1);\n                if ($scope.fixed.length < $scope.metrics.length - 1) {\n                    $scope.disableAll = false;\n                }\n            }\n        };\n\n        $scope.sum = function() {\n                let sum = 0;\n\n                for (let weight of $scope.weightings) {\n                    sum += Math.abs(weight);\n                }\n\n                return sum;\n            };\n            //Establish watch expression for fixed metrics\n            //If some metrics are fixed, the ranges for the others must be shortened\n        $scope.$watchCollection('fixed', (newVal) => {\n            let sumFixed = 0;\n            for (let metric of $scope.fixed) {\n                sumFixed += Math.abs($scope.weightings[metric]);\n            }\n            $scope.rangeMax = 100 - sumFixed;\n            $scope.rangeMin = -1 * $scope.rangeMax;\n        });\n\n        //Establish watch expression for weightings\n        //to ensure absolute sum of weightings is 100.\n        $scope.$watchCollection('weightings', (newVal, oldVal) => {\n            //Is the absolute sum of the weightings 100?\n            let sum = $scope.sum();\n            // If not, adjust weightings of unchanged metrics.\n            if (sum !== 100) {\n                let diff = 100 - sum;\n                const metrics = $scope.metrics;\n\n                //Which metric changed?\n                let changed;\n                for (let metric of metrics) {\n                    if (newVal[metric] !== oldVal[metric]) {\n                        changed = metric;\n                        break;\n                    }\n                }\n                // Make an array of the unchanged metrics that are not fixed.\n                let unchanged = metrics.filter(metric => metric !== changed && $scope.fixed.indexOf(metric) === -1);\n                // if diff is positive, find metric to increase.\n                if (diff > 0) {\n                    for (let metric of unchanged) {\n                        if ($scope.weightings[metric] >= 0 && $scope.weightings[metric] + diff <= 100) {\n                            $scope.weightings[metric] += diff;\n                            break;\n                        }\n                        else if ($scope.weightings[metric] < 0 && $scope.weightings[metric] - diff >= -100) {\n                            $scope.weightings[metric] += -1 * diff;\n                            break;\n\n                        }\n                    }\n                }\n                // If diff is negative, get rid of diff by deacreasing one or more metrics.\n                //Have to be careful because range is from -100 to 100 and\n                //we must decrease absolute values\n                else {\n                    for (let metric of unchanged) {\n                        if ($scope.weightings[metric] <= 0) {\n                            const inc = Math.min(-1 * diff, -1 * $scope.weightings[metric]);\n                            $scope.weightings[metric] += inc;\n                            diff += inc;\n                            if (diff === 0) {\n                                break;\n                            }\n                        }\n                        else {\n                            $scope.weightings[metric] += diff;\n                            const inc = -1 * Math.min(-1 * diff, $scope.weightings[metric]);\n                            $scope.weightings[metric] += inc;\n                            diff += inc;\n                            if (diff === 0) {\n                                break;\n                            }\n\n                        }\n                    }\n                }\n\n            }\n        });\n\n    }]);"]}